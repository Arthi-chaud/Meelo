name: "Server"
on:
  pull_request:
    branches: [ main, v3 ]
  push:
    branches: [ main, v3 ]
  release:
    types: [ published ]

defaults:
  run:
    working-directory: ./server

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      server: ${{ steps.filter.outputs.server }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            server:
              - 'server/**'
              - '.github/workflows/server.yml'
              - '.github/actions/cache-server/**'
              - '.github/actions/dockerize/**'
  Build:
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' && github.event_name == 'pull_request' }}
    container: node:22-alpine3.20
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Restore Dependencies
        uses: ./.github/actions/cache-server
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: yarn build
  Biome:
    if: ${{ needs.changes.outputs.server == 'true' && github.event_name == 'pull_request' }}
    container: node:22-alpine3.20
    runs-on: ubuntu-latest
    needs: [ Build ]
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Restore Dependencies
        uses: ./.github/actions/cache-server
      - name: Install Dependencies
        run: yarn install
      - name: Run Linter
        run: yarn run biome ci .
  Tests:
    runs-on: ubuntu-latest
    container: node:22-alpine3.20
    needs: [ Build ]
    if: ${{ needs.changes.outputs.server == 'true' && always() }}
    env:
      NODE_OPTIONS: "--max_old_space_size=4096"
      DATABASE_URL: "postgresql://test:test@postgres:5432/test?schema=public"
      JWT_SIGNATURE: "12345"
      GENIUS_ACCESS_TOKEN: "${{ secrets.GENIUS_ACCESS_TOKEN }}"
      MEILI_MASTER_KEY: 1234
      MEILI_HOST: http://meilisearch:7700
    services:
      postgres:
        image: postgres:alpine3.16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      meilisearch:
        image: getmeili/meilisearch:v1.5
        ports:
          - 7700:7700
        env:
          MEILI_MASTER_KEY: 1234
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Restore Dependencies
        uses: ./.github/actions/cache-server
      - name: Install Dependencies
        run: yarn install
      - name: Migrate DB Schema
        run: yarn run prisma migrate dev
      - name: Run unit tests with coverage
        run: yarn --cwd server test --coverage --ci --no-cache --maxConcurrency=1
      - name: Upload Unit Tests artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-server
          path: ./server/coverage
  Analysis:
    needs: [ Tests ]
    name: "Static Analysis"
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.server == 'true' && always() }}
    steps:
      - uses: actions/checkout@v3
      - name: Downlad Coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-server
          path: ./server/coverage
      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@master
        with:
          projectBaseDir: ./server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
  Dockerize:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ github.event_name == 'release' || (needs.changes.outputs.server == 'true' && (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))) }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - uses: ./.github/actions/dockerize
        with: 
          docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
          docker-token: ${{ secrets.DOCKERHUB_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          context: ./server
          image-suffix: server
          publish: ${{ github.event_name == 'release' || (needs.changes.outputs.server == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main') }}
