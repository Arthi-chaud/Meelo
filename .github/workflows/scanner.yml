name: "Scanner"
on:
  pull_request:
    branches: [ main, v3 ]
  push:
    branches: [ main, v3 ]
  release:
    types: [ published ]

defaults:
  run:
    shell: bash
    working-directory: ./scanner

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      scanner: ${{ steps.filter.outputs.scanner }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            scanner:
              - 'scanner/**'
              - '.github/workflows/scanner.yml'
              - '.github/actions/cache-scanner/**'
              - '.github/actions/dockerize/**'
  Build:
    needs: changes
    container: ghcr.io/hybridgroup/opencv:4.12.0
    if: ${{ needs.changes.outputs.scanner == 'true' && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/cache-scanner
      - name: Install Dependencies and Build
        run: go build -buildvcs=false  -o scanner ./app
  Format:
    if: ${{ needs.changes.outputs.scanner == 'true' && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    container: ghcr.io/hybridgroup/opencv:4.12.0
    needs: [ Build ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/cache-scanner
      - uses: Jerome1337/gofmt-action@v1.0.5
        with:
          gofmt-path: './scanner'
          gofmt-flags: '-l'
  Tests:
    runs-on: ubuntu-latest
    container: ghcr.io/hybridgroup/opencv:4.12.0
    needs: [ Build ]
    if: ${{ needs.changes.outputs.scanner == 'true' && always() }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/cache-scanner
      - run: apt-get update -y && apt-get install -y ffmpeg
      - name: Install Coverage Report
        run: go install github.com/jandelgado/gcov2lcov@latest
      - name: Run tests
        run: go test ./... -coverprofile=coverage.out
      - name: Upload Unit Tests artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-scanner
          path: ./scanner/coverage.out
  Analysis:
    needs: [ Tests ]
    name: "Static Analysis"
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.scanner == 'true' && always() }}
    steps:
      - uses: actions/checkout@v4
      - name: Downlad Coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-scanner
          path: ./scanner
      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@master
        with:
          projectBaseDir: ./scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_SCANNER }}
  Dockerize:
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            docker-arch: linux/amd64
            name: 'AMD'
          - runs-on: ubuntu-24.04-arm
            docker-arch: linux/arm64
            name: 'ARM'
    runs-on: ${{ matrix.runs-on }} 
    name: Dockerize (${{ matrix.name }})
    needs: changes
    if: ${{ github.event_name == 'release' || (needs.changes.outputs.scanner == 'true' && (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))) }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - uses: ./.github/actions/dockerize
        with: 
          docker-arch: ${{ matrix.docker-arch }}
          docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
          docker-token: ${{ secrets.DOCKERHUB_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          context: ./scanner
          image-suffix: scanner
          publish: ${{ github.event_name == 'release' || (needs.changes.outputs.scanner == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main') }}

