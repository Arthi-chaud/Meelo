{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-meelos-user-documentation","title":"Welcome to Meelo's User Documentation","text":""},{"location":"album-types/","title":"Meelo's Album Types","text":"<p>In Music Apps, we usually call any song container an Album. While this is technically incorrect, many music streaming services categorizes these Albums in sub-categories: Albums, Singles, Live, Compilations, etc.</p>"},{"location":"album-types/#available-types","title":"Available Types","text":"<p>Meelo supports this categorization, and the following album types:</p> <ul> <li>Studio Recording<ul> <li>What we would usually call Albums</li> </ul> </li> <li>Live Recording</li> <li>Compilation</li> <li>Single</li> <li>Soundtrack</li> <li>Remix Album<ul> <li>Collections that would mainly have remixes of songs by a single artist, while not being a Single</li> </ul> </li> <li>Video Album<ul> <li>Any kind of collection that would only contain video tracks</li> </ul> </li> </ul>"},{"location":"album-types/#type-recognition","title":"Type recognition","text":"<p>Meelo tries to be as independent of user interactions as possible. Therefore, type recognition is done automatically, when a new album is registered.</p> <p>For now, Type recognition is solely based on the Album's title. Keywords to recognize an album's type were inspired by the way other music streaming services would categorize an album. Therefore, if your music collection's naming convention work a similar way to Spotify, Apple Music, ..., there might not be a lot to change if you want to fully enjoy this feature. However, if you consider that one of the following ways to recognize a type is incomplete or incorrect, feel free to open an issue.</p>"},{"location":"album-types/#keywords","title":"Keywords","text":"Album Type Keywords Studio Album See note below Compilations - <code>best of</code>- <code>hits</code>- <code>greatest hits</code>- <code>singles</code>- <code>collection</code>+ See note below Live Recording - '<code>tour</code>' (Notice the leading whitespace)- <code>live from</code>- <code>live at</code>- <code>unplugged</code>- <code>(live)</code> Single - <code>- single</code>- <code>- ep</code>- <code>(remixes)</code> Video Album - <code>music videos</code>- <code>the video</code>- <code>dvd</code> Remix Album - <code>remix album</code>- <code>mixes</code>- <code>the remixes</code>- <code>remixed</code>- <code>remixes</code>- <code>best mixes</code> Soundtrack - <code>soundtrack</code>- <code>from the motion picture</code>- <code>music from and inspired by</code> <p>Notes:</p> <ul> <li>Keywords are case-insensitive.</li> <li>Any album that would not fall into the other categories will be considered to be a Compilation IF the album is a 'compilation' album (see metadata)</li> <li>Any album that would not fall into the other categories will be considered to be a Studio Recording</li> </ul>"},{"location":"featuring-artists/","title":"Meelo's Featuring Artist Management","text":"<p>Meelo is now able to parse and recognise featuring artists on a song, based on:</p> <ul> <li>Its name</li> <li>Its artist field (from the metadata)</li> </ul> <p>It does not leverage the album artist.</p> <p>For example, a song named 'My Song (feat. Another Artist)' by 'Primary Artist &amp; Other Artist' would be parsed to 'My Song' by artist 'Primary artist', featuring 'Other Artist' and 'Another Artist'.</p> <p>Therefore, each featuring artist will be added to the database, and treated like any other artist.</p> <p>Parsing works with <code>()</code>, <code>[]</code> and <code>-</code> as delimiters.</p>"},{"location":"featuring-artists/#examples","title":"Examples","text":"<p>In this section, we list examples that would be successfully parsed by Meelo</p> <ul> <li>'My Song (feat. B)' by 'A'<ul> <li>Name: 'My Song'</li> <li>Artist: 'A'</li> <li>Featuring: 'B'</li> </ul> </li> <li>'My Song (Remix) [feat. B]' by 'A'<ul> <li>Name: 'My Song (Remix)'</li> <li>Artist: 'A'</li> <li>Featuring: 'B'</li> </ul> </li> <li>'My Song' by 'A &amp; B'<ul> <li>Name: 'My Song'</li> <li>Artist: 'A'</li> <li>Featuring: 'B'</li> </ul> </li> <li>'My Song' by 'A, B &amp; C'<ul> <li>Name: 'My Song'</li> <li>Artist: 'A'</li> <li>Featuring: 'B', 'C'</li> </ul> </li> <li>'My Song - With D' by 'A, B &amp; C'<ul> <li>Name: 'My Song'</li> <li>Artist: 'A'</li> <li>Featuring: 'B', 'C', 'D'</li> </ul> </li> <li>'My Song - Version With Drums' by 'A'<ul> <li>Name: 'My Song - Version With Drums'</li> <li>Artist: 'A'</li> <li>Featuring: None</li> </ul> </li> <li>'My Song' by 'A Vs. B'<ul> <li>Name: 'My Song'</li> <li>Artist: 'A'</li> <li>Featuring: 'B'</li> </ul> </li> </ul>"},{"location":"featuring-artists/#special-case-artist-is-already-known","title":"Special Case: Artist is already known","text":"<p>By default, we use '&amp;' to find and split a list of artist. However, this behaviour changes if an artist containing '&amp;' already exists.</p> <p>For example, if we had an album artist named 'A &amp; B' (since album artist are not parsed as much as song artists), a song named 'My Song (feat. A &amp; B)' would be parsed as 'My Song', with featuring artist 'A &amp; B'.</p>"},{"location":"song-types/","title":"Meelo's Album Types","text":"<p>It is possible to filter songs based on their type. </p>"},{"location":"song-types/#available-types","title":"Available Types","text":"<p>Meelo supports the following song types:</p> <ul> <li>Original</li> <li>Live</li> <li>Acoustic</li> <li>Remix</li> <li>Instrumental</li> <li>A Cappella</li> <li>Edit<ul> <li>Of the original version.</li> <li>If the song is an edit of a remix, it will be categorised as 'Remix'</li> </ul> </li> <li>Clean</li> <li>Demo</li> <li>Medley</li> <li>Non-Music (e.g. Interviews)</li> </ul>"},{"location":"song-types/#type-recognition","title":"Type recognition","text":"<p>Songs' type recognition is solely based on keywords present in their name. For example:</p> <ul> <li>'My Song (Remix)' would be typed as 'Remix'</li> <li>'My Song (Live)' would be recognised as a Live rendition</li> <li>'My Song (Rough Mix)' would be defined as 'Demo'</li> <li>'My Song (Instrumental Mix)' would be an 'Instrumental'</li> <li>'My Song (Instrumental Break Down Mix)' would be a 'Remix'</li> </ul>"},{"location":"setup/create-conf-folder/","title":"Create a configuration folder","text":"<p>Meelo is runnable through a Docker container. But it needs a way to be parameterized and persist some data.</p> <p>Therefore, it is recommended that you create a dedicated folder on your computer for Meelo.</p> <p>For the sake of clarity, in this documentation, we'll refer to this folder as <code>Meelo</code>.</p>"},{"location":"setup/create-library/","title":"Create your first library","text":"<p>After creating the admin account (from Web App), Visit the <code>/settings/libraries</code>, and click <code>Create Library</code> to create your first library.</p> <p>Once your library is created, you should run a scan to collect the related files. To do so, click the Scan button.</p> <p>Your Meelo server is ready to be used! Visit the <code>/</code> route on your favourite browser to enjoy your favourite music :).</p>"},{"location":"setup/docker/","title":"Docker and Docker-compose","text":"<p>In your <code>Meelo</code> folder, copy this docker-compose file as <code>docker-compose.yml</code>. It can be used as-is.</p> <p>Additionally, you should copy nginx configuration file as is in your <code>Meelo</code> folder.</p>"},{"location":"setup/env/","title":"Environment variables","text":"<p>In your <code>Meelo</code> directory, copy this <code>.env.example</code> as <code>.env</code> and fill the variables</p>"},{"location":"setup/prepare-music-library/","title":"Prepare your music library","text":"<p>The toughest part is to have an structured music library. The way files are organised are up to you! But here is a recommended architecture:</p> <pre><code>Library's Folder   \n\u2502\nArtist 1\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500Album 1\n\u2502       \u2502   01 Track 1.m4a\n\u2502       \u2502   02 Track 2.m4a\n|       |   cover.jpg\n\u2502       \u2502   ...\n\u2502   ...\n</code></pre> <p>Meelo provides two ways of collecting metadata: using embedded tags, or using the path of the file. If a metadata source does not provide a specific field, you can use the other as a fallback. (You will configure this behaviour in the next sections). But before going any further, you should decide which metadata collection method to use.</p>"},{"location":"setup/providers/","title":"Providers","text":""},{"location":"setup/providers/#enabling-providers","title":"Enabling Providers","text":"<p>In the <code>settings.json</code>, ff the <code>provider</code> object does not contain a provider's settings, this provider will be disabled.</p> <p>Providers can also be disabled explicitly by setting the Provider's settings' field <code>enabled</code> at <code>false</code>. For example:</p> <pre><code>// In settings.json\n{\n  //... Other properties\n  \"providers\": {\n    \"provider1\": {}, // Provider 1 is enabled\n    // Provider 2 was not specified, it is therefore disabled\n    \"provider3\": {\n      \"enabled\": true // Provider 3 is enabled\n    },\n    \"provider4\": {\n      \"enabled\": false, // Provider 4 is disabled\n      \"apiKey\": \"\" // Other property of provider 4\n    } \n  }\n}\n</code></pre> <p>If a provider is disabled, no call to its service will be done.</p>"},{"location":"setup/providers/#providers-properties-and-features","title":"Providers' properties and features","text":"Provider Name Key Additional Properties Artist Description Artist Illustration Album Description Album Rating Song Description Song Lyrics Release Identification Album Genres Genius <code>genius</code> <code>apiKey</code>: Access Token, you can get it here x x x x x MusicBrainz <code>musicbrainz</code> None x AllMusic <code>allmusic</code> None x x MetaCritic <code>metacritic</code> None x x Wikipedia <code>wikipedia</code> None x x x Discogs <code>discogs</code> <code>apiKey</code>: Access Token, you can get it here x x x <p>Warning: Meelo heavily relies on Wikidata to optimize the metadata fetching. It is used if, and only if the MusicBrainz Provider is enabled. It is not possible to use one without the other. </p> <p>Note: If MusicBrainz is enabled, we might make requests to AcoustID's API to match songs using audio fingerprints (No data will be submitted).</p>"},{"location":"setup/requirements/","title":"Requirements","text":"<p>Meelo is easy to setup! But you'll need the following things before continuing</p> <ul> <li>Have you music library ready (see this step)</li> <li>Know how <code>Docker</code> and <code>docker-compose</code> work</li> <li>Know how to create a <code>.env</code> file</li> <li>Know how to manipulate Regular Expressions (Especially the Golang flavor)</li> </ul>"},{"location":"setup/settings/","title":"Prepare your settings","text":"<p>In your <code>Meelo</code> folder, download and fill this <code>settings.json</code> file</p> <p>All fields are required</p> <ul> <li><code>trackRegex</code>: Probably the most important setting for Meelo. This field takes an array of strings, each string being a Regular Expression string. The RegExp will be used to find the files to import (It will be matched against the absolute path of the file). As mentioned before, the path of the file can be used as a metadata source. Therefore, the Regular Expression accepts groups to find metadata:<ul> <li><code>AlbumArtist</code>: The artist of the parent album.<ul> <li>Special Case: If it equals <code>Compilations</code>, related album will be considered as compilation albums (with no main artist, like soundtrack albums)</li> </ul> </li> <li><code>Artist</code>: The artist of the track. If it is not present, it will use the <code>AlbumArtist</code> field.</li> <li><code>Release</code>: Usually no present in a standard file architecture; the name of the release. When it is not present, the <code>Album</code> field will be used.</li> <li><code>Album</code>: The name of the album of the material. This field will then be parsed to group related album releases.</li> <li><code>Year</code>: The Year of the release of the material</li> <li><code>Disc</code>: The Index of the disc the track is on.</li> <li><code>Index</code>: The index of the track in a playlist/on a disc.</li> <li><code>Track</code>: The name of the track</li> <li><code>Genre</code>: The genre of the material</li> <li><code>DiscogsID</code>: The Discogs ID of the parent release. A Discogs ID should take the form of a digit-only string. This ID can be found in the URL of the release's Discogs page or in the top-right corner of that page (displayed as <code>[rXXXXXXXX]</code>)</li> <li>Note: If you do not use embedded data, most regex groups are optional. Only <code>Track</code> and (<code>AlbumArtist</code> or <code>Artist</code>) are required for the file to be accepted by the scanner.</li> </ul> </li> <li><code>metadata</code>: Configuration of the metadata extraction system:<ul> <li><code>source</code>: The primary metadata source to use:<ul> <li><code>embedded</code>: Using the embedded tags</li> <li><code>path</code>: Using the Regular Expression's groups.</li> </ul> </li> <li><code>order</code>: Define the missing metadata fallback behaviour. Note: if this method is enabled, it will consider 'cover.*' file in the same directory as the media file as an illustration candidate.<ul> <li><code>only</code>: If a field is missing from the primary metadata source, will not use the other method to get it.</li> <li><code>preferred</code>: If a field is missing from the primary metadata source, will try to use the other method to get it.</li> </ul> </li> <li><code>useExternalProviderGenres</code>: Set to <code>true</code> if you want genres from external metadata providers to be used. These genres will be used alongside with embedded genres (if parsing embedded metadata is enabled)</li> </ul> </li> <li><code>providers</code>: Please refer to Providers</li> <li><code>compilations</code>:<ul> <li><code>artists</code>: Optional field. If an album artist in this list, their albums will be considered to be compilation albums.</li> <li><code>useID3CompTag</code>: If true, use iTunes' non-standard ID3 tags for compilations.</li> </ul> </li> </ul> <p>Note: The provided Regular Expression uses the iTunes file architecture.</p> <p>Note: Regular Expression must use the Golang Flavour.</p>"},{"location":"setup/startup/","title":"Start Meelo","text":"<p>Once these three files are ready, run the following command from your <code>Meelo</code> folder:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"setup/startup/#troubleshooting","title":"Troubleshooting","text":"<p>Two things can prevent Meelo from starting normally:</p> <ul> <li>A bad <code>settings.json</code> file<ul> <li>In that case, a message should tell you what went wrong</li> </ul> </li> <li>Connection to database failed<ul> <li>In that case, you should have a red message telling you a query failed. To fix, simply restart the server</li> </ul> </li> </ul>"},{"location":"setup/tldr/","title":"TLDR","text":"<p>Don't feel like reading? Here's how to setup Meelo quickly</p> <ul> <li>Download and fill this <code>docker-compose</code> file</li> <li>Download and fill this <code>nginx</code> configuration file</li> <li>Download and fill this <code>.env</code> file</li> <li>Download and fill this <code>settings.json</code> file</li> </ul> <p>You should be ready to go! If something goes wrong, please take the time to read the <code>Setup</code> section of this documentation.</p> <p>Enjoy!</p>"}]}