datasource db {
	provider	= "postgresql"
	url			= env("DATABASE_URL")
}

generator client {
  	provider 	= "prisma-client-js"
	engineType = "binary"
	binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
	previewFeatures = ["fullTextSearch"]
}

generator classes {
  provider                        = "prisma-types-generator"
  output                          = "../src/prisma/models"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  dtoSuffix                       = ""
  entityPrefix                    = ""
  entitySuffix                    = "WithRelations"
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  excludeEntity                   = "false"
  excludePlainDto                 = "false"
  excludeCreateDto                = "false"
  excludeUpdateDto                = "false"
  excludeConnectDto               = "true"
  definiteAssignmentAssertion     = "true"
}

/////// Models

model User {
	/// @description Unique numeric user identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description the username
	name			String	@unique
	/// @description the hashed password of the user\'s account
	password		String
	/// @description Indicates if the user is allowed to use the application
	enabled			Boolean @default(false)
	/// @description Indicates if the user is an admin or not
	admin			Boolean @default(false)
	@@map("users")
}

model Genre {
	/// @description Unique numeric Genre identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The name of the genre
	/// @example My Genre
	name			String	@db.Citext()
	/// @description Unique string identifier
	/// @example my-genre
	slug			String	@unique
	/// @description The songs from this genre
	songs			Song[]
	/// @description The albums from this genre
	albums			Album[]
	@@map("genres")
}

enum AlbumType {
	/// Describes is an original collection of studio recordings
	StudioRecording
	/// Describes a collection of live recordings
	LiveRecording
	/// Describes a collection of recordings that do not come from a common studio album or artist
	Compilation
	/// Describes a collection of track, usually below 10, that are related to a single song, of songs from a common era
	Single
	/// Describe a collection of tracks coming from another project's soundtrack
	Soundtrack
	/// Describe a collection of remixed tracks from the same artist
	RemixAlbum
	/// Describe a collection of video tracks from the same artist
	VideoAlbum
	@@map("album-types")
}
/// An album is a record of releases.
model Album {
	/// @description Unique numeric Album identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The title of the album
	/// @example My Album
	name			String	@db.Citext()
	/// @description String identifier, for string-based finding
	/// @example my-album
	slug			String
	/// @description The date of the first release of the album
	releaseDate		DateTime?
	/// @description The date the album was registered
	registeredAt		DateTime	@default(now())
	/// @description The main/most used release of the Album, by default the first one
	master			Release?	@relation("Master", fields: [masterId], references: [id], onDelete: SetNull)
	/// @description Unique numeric identifier of the main release, if there is one
	/// @example 123
	masterId		Int?		@unique
	/// @description Collections of related releases
	releases		Release[]	@relation("Releases")
	/// @description Describes the type of the album
	type			AlbumType	@default(StudioRecording)
	/// @description The artist of the album
	artist			Artist?		@relation(fields: [artistId], references: [id])
	/// @description Unique numeric identifier of the main artist, if there is one
	/// @example 123
	artistId		Int?
	/// @description Array of external IDs
	externalIds		AlbumExternalId[]
	/// @description The genres of the album
	genres Genre[]
	@@unique([slug, artistId])
	@@map("albums")
}

/// An artist is a person who has albums
model Artist {
	/// @description Unique numeric Artist identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The name of the artist
	/// @example My Artist
	name			String	@db.Citext()
	/// @description Unique string identifer
	/// @example my-artist
	slug			String	@unique
	/// @description Array of Albums where the artist is the main one
	albums			Album[]
	/// @description Array of Songs by the artist
	songs			Song[]	@relation("MainSongArtist")
	/// @description Array of Songs by the artist features in
	featuredOn		Song[]	@relation("ArtistToSong")
	/// @description The date the artist was registered
	registeredAt		DateTime	@default(now())
	/// @description Array of external IDs
	externalIds		ArtistExternalId[]
	/// @description Related Illustration
	illustration	ArtistIllustration?
	@@map("artists")
}

/// A file represent the source file from which a track is imported
model File {
	/// @description Unique numeric File identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The path of the file, relate to the parent library
	/// @example path/to/file
	path			String
	/// @description MD5 checksum of the file
	md5Checksum		String
	/// @description Date of the file\'s registration
	registerDate	DateTime
	/// @description Track from the file
	track			Track?
	/// @descrption Library the file is registered under
	library			Library	@relation(fields: [libraryId], references: id)
	/// @description Unique numeric identifier of the library it is been registered under
	/// @example 123
	libraryId		Int
	@@unique([path, libraryId])
	@@map("files")
}

/// A Library groups files under a given path
model Library {
	/// @description Unique numeric Library identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The name of the library, whose slug will be built from
	/// @example My Library
	name			String	@db.Citext()	@unique
	/// @descrption Slug of the library, based on its name
	/// @example my-library
	slug			String	@unique
	/// @description Path of the library
	/// @example path/to/library
	path			String	@unique
	/// @descriptionFiles from the library
	files			File[]
	@@map("libraries")
}

/// A release is 'an instance' of an Album
model Release {
	/// @description Unique numeric Release identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The title of the release
	/// @example My Album
	name			String	@db.Citext()
	/// @description The Extensions of the release
	/// @example ["Deluxe Edition"]
	extensions		String[]
	/// @description String identifier of the release
	/// @example my-album-deluxe-edition
	slug			String
	/// @description The date of the release
	releaseDate		DateTime?
	/// @description The tracks on the release
	tracks			Track[]
	/// @description The reference Album
	album			Album		@relation("Releases", fields: [albumId], references: [id])
	/// @description Unique numeric identifier of the parent album
	/// @example 123
	albumId			Int
	masterOf		Album?		@relation("Master")
	/// @description The date the release was registered
	registeredAt		DateTime	@default(now())
	/// @description The related Illustrations
	illustration		ReleaseIllustration[]
	/// @description Array of external IDs
	externalIds		ReleaseExternalId[]
	@@unique([albumId, slug])
	@@map("releases")
}
/// A song is described by a title, an artist, and 'instanciated' by Tracks
model Song {
	/// @description Unique numeric Song identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description Name of the song
	/// @example My Song
	name			String	@db.Citext()
	/// @description String identifier of the song
	/// @example my-song
	slug			String
	/// @description The main artist of the song
	artist			Artist	@relation("MainSongArtist", fields: [artistId], references: [id])
	/// @description Unique numeric identifier of the main artist
	/// @example 123
	artistId		Int
	/// @description The main artist of the song
	featuring		Artist[]	@relation("ArtistToSong")
	/// @description The number of times, the song was played
	/// @example 3
	playCount		Int		@default(0)
	/// @description The main/most used track of the song, by default the first one
	master			Track?	@relation("Master", fields: [masterId], references: [id], onDelete: SetNull)
	/// @description Unique numeric identifier of the main release, if there is one
	/// @example 123
	masterId		Int?		@unique
	/// @description Related tracks
	tracks			Track[]
	/// @description The lyrics of the song
	lyrics			Lyrics?
	/// @description The type of the song
	type			SongType		@default(Unknown)
	/// @description The date the song was registered
	registeredAt		DateTime	@default(now())
	/// @description The ID of the Group the song belongs to
	groupId 		Int
	/// @description The Group the song belongs to
	group 			SongGroup @relation(fields: [groupId], references: [id])
	/// @description The genres of the song
	genres Genre[]
	/// @description Array of external IDs
	externalIds		SongExternalId[]
	/// @description List of relations to playlists
	playlists PlaylistEntry[]
	@@unique([slug, artistId])
	@@map("songs")
}

model SongGroup {
	/// @description Unique numeric Song identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description String notation of the group
	/// @example kylie-minogue-all-the-lovers
	slug			String	@unique
	/// @description Song that belong to this group
	versions		Song[]
	@@map("song_groups")
}

/// A type of song
enum SongType {
	/// The original, album version of the song
	Original
	/// A live rendition of the song
	Live
	/// An acoustic rendition of the song
	Acoustic
	/// A Remix/Dub of the song 
	Remix
	/// The instrumental version of the song
	Instrumental
	/// The acapella version of the song
	Acapella
	/// The edit of the original version of the song
	Edit
	/// The clean version of the song
	Clean
	/// A demo of the song
	Demo
	/// Interviews, Documentary, Photo Galleries, etc.
	NonMusic
	/// Used for migrations
	Unknown
	@@map("song-types")
}

/// Enumeration of the different sources of a track rip
enum RipSource {
	/// Extracted from an Audio CD
	CD
	/// Extracted from a DVD
	DVD
	/// Extracted from a Blu-Ray disc
	BluRay
	/// Ripped from an Audio Tape
	Cassette
	/// Ripped from an Vinyl Record
	Vinyl
	/// Digital source
	Digital
	/// Other rip source
	Other
	@@map("rip-sources")
}

/// The lyrics of a song
model Lyrics {
	/// @description Unique numeric Lyrics identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The lyrics of the song
	/// @example Hello\\nWorld
	content			String
	/// @description The parent song
	song			Song @relation(fields: [songId], references: [id], onDelete: Cascade)
	/// @description Unique numeric identifier of the related song
	/// @example 123
	songId			Int @unique
	@@map("lyrics")
}

/// Enumeration of forms a Track can be
enum TrackType {
	/// Audio, sound but no video
	Audio
	/// Video, for example: Music Video
	Video
	@@map("track-types")
}

/// An track is an 'instance' of a song
model Track {
	/// @description Unique numeric Track identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The reference song
	song 			Song	@relation(fields: [songId], references: [id])
	/// @description Unique numeric identifier of the parent song
	/// @example 123
	songId			Int
	/// @description The parent release the track can be found on
	release 		Release	@relation(fields: [releaseId], references: [id])
	/// @description Unique numeric identifier of the parent release
	/// @example 123
	releaseId		Int
	/// @description The display name of the track
	/// @example My Song (Album Version)
	name		String
	/// @description The index of the disc the track is on
	/// @example 1
	discIndex		Int?
	/// @description The index of the track on the disc
	/// @example 2
	trackIndex		Int?
	/// @description Type of track (Audio or Video)
	type			TrackType
	/// @description Bitrate, in kbps
	/// @example 320
	bitrate			Int?
	/// @description The type of source the track is ripped from
	ripSource		RipSource?
	/// @description The duration in seconds of the track
	/// @example 120
	duration		Int?
	/// @description If it is a "Bonus" track
	/// @example false
	isBonus		Boolean @default(false)
	/// @description If the track has been remastered
	/// @example false
	isRemastered		Boolean @default(false)
	/// @description The track from the file
	sourceFile			File	@relation(fields: [sourceFileId], references: [id])
	/// @description Unique numeric identifier of the source file
	/// @example 123
	sourceFileId		Int		@unique
	masterOf		Song?		@relation("Master")
	@@map("tracks")
}

model Provider {
	/// @description Unique numeric Provider identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description the name of the provider
	name			String	@unique
	/// @description Unique string identifer
	/// @example music-brainz
	slug			String	@unique
	/// @description Identifiers of Songs
	songIds			SongExternalId[]
	/// @description Identifiers of Artist
	artistIds		ArtistExternalId[]
	/// @description Identifiers of Albums
	albumIds		AlbumExternalId[]
	/// @description Identifiers of Releases
	releaseIds		ReleaseExternalId[]
	@@map("providers")
}

model SongExternalId {
	/// @description Unique numeric identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The song
	song			Song @relation(fields: [songId], references: [id], onDelete: Cascade)
	/// @description Unique numeric identifier of the related song
	/// @example 123
	songId			Int
	/// @description Short text about the related resource
	description		String?
	/// @description The Provider
	provider		Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
	/// @description Unique numeric identifier of the provider
	/// @example 123
	providerId		Int
	/// @description Actual Value of the external identifier
	value			String
	@@map("song_external_ids")
}

model ArtistExternalId {
	/// @description Unique numeric identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The artist
	artist			Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
	/// @description Unique numeric identifier of the related artist
	/// @example 123
	artistId		Int
	/// @description Short text about the related resource
	description		String?
	/// @description The Provider
	provider		Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
	/// @description Unique numeric identifier of the provider
	/// @example 123
	providerId			Int
	/// @description Actual Value of the external identifier
	value			String
	@@map("artist_external_ids")
}

model AlbumExternalId {
	/// @description Unique numeric identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The album
	album			Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
	/// @description Unique numeric identifier of the related album
	/// @example 123
	albumId			Int
	/// @description Short text about the related resource
	description		String?
	/// @description A number, between 0 and 100
	rating			Int?
	/// @description The Provider
	provider		Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
	/// @description Unique numeric identifier of the provider
	/// @example 123
	providerId		Int
	/// @description Actual Value of the external identifier
	value			String
	@@map("album_external_ids")
}

model ReleaseExternalId {
	/// @description Unique numeric identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The release
	release			Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)
	/// @description Unique numeric identifier of the related album
	/// @example 123
	releaseId			Int
	/// @description Short text about the related resource
	description		String?
	/// @description The Provider
	provider		Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
	/// @description Unique numeric identifier of the provider
	/// @example 123
	providerId		Int
	/// @description Actual Value of the external identifier
	value			String
	@@map("release_external_ids")
}

/// A Playlist connects songs together, in an ordered wa
model Playlist {
	/// @description Unique numeric Playlist identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The name of the playlist
	/// @example My Playlist
	/// @minLength 1
	name			String	@db.Citext()
	/// @description Unique string identifer
	/// @example my-playlist
	/// @minLength 1
	slug			String	@unique
	/// @description The date the playlist was created
	createdAt		DateTime	@default(now())
	/// @description Array of external IDs
	entries		PlaylistEntry[]
	/// @description Related Illustration
	illustration	PlaylistIllustration?
	@@map("playlists")
}

model PlaylistEntry {
	/// @description Unique numeric identifier
	/// @example 123
	id				Int		@id @default(autoincrement())
	/// @description The Identifier of the song
	songId			Int
	song			Song 	@relation(fields: [songId], references: [id], onDelete: Cascade)
	/// @description The Identifier of the parent playlist 
	playlistId		Int
	playlist		Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
	/// @minimum 0
	/// @description The index of the entry in the playlist, starting at 0
	index			Int
	@@map("playlist_entries")
}

model ArtistIllustration {
	/// @description Unique numeric identifier
	/// @example 123
	id				Int		@id	@default(autoincrement())
	/// @description Related Artist\'s Identifier
	/// @example 123
	artistId		Int		@unique
	artist			Artist	@relation(fields: [artistId], references: [id], onDelete: Cascade)
	/// @description Blurhash value of the illustration. See https://github.com/woltapp/blurhash for more info.
	/// @example LEHV6nWB2yk8pyo0adR*.7kCMdnj
	blurhash		String
	/// @description List of dominant colors in the image
	/// @example ['#FFFFFF', '#123123', '#F0F0F0']
	colors			String[]
	/// @description Aspect Ratio of the image
	/// @example 0.33
	aspectRatio		Float	@default(1)
	@@map("artist_illustrations")
}

model PlaylistIllustration {
	/// @description Unique numeric identifier
	/// @example 123
	id				Int		@id	@default(autoincrement())
	/// @description Related Playlist\'s Identifier
	/// @example 123
	playlistId		Int		@unique
	playlist		Playlist	@relation(fields: [playlistId], references: [id], onDelete: Cascade)
	/// @description Blurhash value of the illustration. See https://github.com/woltapp/blurhash for more info.
	/// @example LEHV6nWB2yk8pyo0adR*.7kCMdnj
	blurhash		String
	/// @description List of dominant colors in the image
	/// @example ['#FFFFFF', '#123123', '#F0F0F0']
	colors			String[]
	/// @description Aspect Ratio of the image
	/// @example 0.33
	aspectRatio		Float	@default(1)
	@@map("playlist_illustrations")
}

model ReleaseIllustration {
	/// @description Unique numeric identifier
	/// @example 123
	id				Int		@id	@default(autoincrement())
	/// @description Related Release\'s Identifier
	/// @example 123
	releaseId		Int
	release			Release	@relation(fields: [releaseId], references: [id], onDelete: Cascade)
	/// @description The index of the disc. If null, the illustration is the \'main\' one
	disc			Int?
	/// @description The index of the track.
	track			Int?
	/// @description Blurhash value of the illustration. See https://github.com/woltapp/blurhash for more info.
	/// @example LEHV6nWB2yk8pyo0adR*.7kCMdnj
	blurhash		String
	/// @description List of dominant colors in the image
	/// @example ['#FFFFFF', '#123123', '#F0F0F0']
	colors			String[]
	/// @description MD5 Hash of The File
	hash			String
	/// @description Aspect Ratio of the image
	/// @example 0.33
	aspectRatio		Float	@default(1)
	@@map("release_illustrations")
	@@unique([releaseId, disc, track])
}
