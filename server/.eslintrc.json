{
	"root": true,
	"extends": [
		"eslint:recommended",
		"plugin:prettier/recommended",
		"plugin:@typescript-eslint/recommended",
		"../.eslintrc.json"
	],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"project": ["./tsconfig.json"]
	},
	"plugins": ["@typescript-eslint", "unused-imports", "import"],
	"ignorePatterns": [
		"node_modules/",
		"test/",
		"src/**/*.spec.ts",
		"src/prisma/models"
	],
	"rules": {
		"no-restricted-imports": [
			"error",
			{
				"name": "@nestjs/common",
				"importNames": ["Logger"],
				"message": "Use Custom Logger to inject from 'src/logger/logger'"
			},
			{
				"name": "src/exceptions/orm-exceptions",
				"importNames": ["UnhandledORMErrorException"],
				"message": "If used in a RepositoryService, use 'onUnknownError' instead. Otherwise ignore"
			},
			{
				"name": "fluent-ffmpeg",
				"message": "Use Ffmpeg Service"
			},
			{
				"name": "@nestjs/event-emitter",
				"importNames": ["OnEvent"],
				"message": "Use wrapped event handlers decorator from 'src/events/event.decorator.ts'"
			},
			{
				"name": "fs",
				"message": "Use FileManager Service"
			},
			{
				"name": "src/pagination/paginated-response.decorator",
				"message": "Do not use the decorator directly. Use 'Response' decorator from 'src/response/response.decorator.ts'"
			},
			{
				"name": "src/pagination/models/paginated-response",
				"message": "Do not use the class directly. Use 'Response' decorator from 'src/response/response.decorator.ts'"
			}
		]
	}
}
